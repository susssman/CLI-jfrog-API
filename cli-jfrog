#!/bin/bash
export CLI_WORKDIR=$(cd $(dirname $0) && pwd)
verified=false; #Check if you can run the command


token_status(){
echo $(curl -s -u jfrogclient:$token -X GET $path/api/system/ping)
}


cli_help() {
  cli_name=${0##*/}
  echo "
$cli_name
CLI Jfrog API Test


Usage: $cli_name [command]

Commands:
  -p|--ping		Get server connection status (example: OK)
  -V|--version		Get Artifactory version
  --create-user		Create user in artifactory (require Pro subscription) example: ./cli-jfrog --create-user testuser1
  --delete-user		Delete user in artifactory (require Pro subscription) example: ./cli-jfrog --delete-user testuser1
  -df|--storage-info	Returns storage summary information regarding binaries, file store and repositories.
  --create-repo		Creates a new repository in Artifactory with the provided configuration. (require Pro subscription) example: ./cli-jfrog --create-repo REPOKEY
  --update-repo		Updates an existing repository configuration in Artifactory with the provided configuration elements. (require Pro subscription) example: ./cli-jfrog --update-repo REPOKEY 
  --get-repo		Returns a list of minimal repository details for all repositories of the specified type, you can choose type and packagetype or leave blank.
  *         Help
"
  exit 1
}

	

#Check if config file present
if test -f ${CLI_WORKDIR}/config ; then
  . ${CLI_WORKDIR}/config
				else
echo "No config file was found, creating new one"
read -p "Enter servername: " servername
echo "servername=$servername" > config
echo "token=" >> config
. ${CLI_WORKDIR}/config
fi




#Set path to cloud
path="https://$servername.jfrog.io/artifactory"
status=$(token_status)
if [ $status = "OK" ]; then
		verified=true;
else
echo "Token was not found or expired, generating new one"
read -p "Username:  " user
read -p "Password:  " -s pass
echo
status=$(curl -s -u $user:$pass -X GET $path/api/system/ping) 

if [ $status = "OK" ]; then
token=$(curl -s -u $user:$pass -XPOST $path/api/security/token -d "username=jfrogclient" -d "scope=member-of-groups:readers" | python3 -c 'import json,sys;obj=json.load(sys.stdin);print(obj["access_token"])')
sed -i "s/token=.*/token=$token/g" config 
status=$(token_status)
verified=true;	
fi
fi

#if verified execute command
if [ $verified ]; then
		case "$1" in
                        -p|--ping) curl -u jfrogclient:$token -X GET $path/api/system/ping; echo;;
                        -V|--version) curl -s -u jfrogclient:$token -X GET $path/api/system/version | python3 -c 'import json,sys;obj=json.load(sys.stdin);print(obj["version"])';;
                        --create-user) curl -s -u jfrogclient:$token -X PUT $path/api/security/users/$2;;
                        --delete-user) curl -s -u jfrogclient:$token -X DELETE $path/api/security/users/$2;;
                        -df|--storage-info) curl -s -u jfrogclient:$token -X GET $path/api/storageinfo | python3 -m json.tool;;
                        --create-repo) curl -s -u jfrogclient:$token -X PUT $path/api/repositories/$2;;
                        --update-repo) curl -s -u jfrogclient:$token -X POST $path/api/repositories/$2 -H "Content-Type: application/json";;
                        --get-repo) read -p "Type: (example: local|remote|virtual|federated|distribution)  " type1
                                    read -p "Package type: (example: maven|gradle|ivy|sbt|helm|cargo |cocoapods|opkg|rpm|nuget|cran|gems|npm|bower|debian|composer|pypi|docker|vagrant|gitlfs|go|yum|conan|chef|pub|puppet|generic)  " type2
                        curl -s -u jfrogclient:$token -X GET "$path/api/repositories?type=${type1}&packageType=${type2}" | python3 -m json.tool;;

#if command not available show help documentation
*)
cli_help;;
esac


#if not verified show token status
else
echo $status
fi
